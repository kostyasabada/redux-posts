{"version":3,"sources":["components/PostForm.jsx","redux/actions.js","redux/types.js","components/Post.jsx","components/Posts.jsx","components/FetchedPosts.jsx","App.js","redux/appReducer.js","redux/rootReducer.js","redux/postsReducer.js","serviceWorker.js","index.js"],"names":["PostForm","useState","title","setTitle","dispatch","useDispatch","onSubmit","event","preventDefault","trim","newPost","id","Date","now","toString","type","payload","console","log","className","htmlFor","value","onChange","target","Post","post","Posts","posts","useSelector","state","length","map","key","FetchedPosts","fetchedPosts","loading","app","class","role","onClick","a","fetch","response","json","setTimeout","App","initialState","rootReducer","combineReducers","action","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9c202956.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { createPost } from '../redux/actions';\n\nexport default function PostForm() {\n  const [title, setTitle] = useState('');\n  const dispatch = useDispatch();\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    if (!title.trim()){\n      return;\n    }\n    const newPost = {\n      title,\n      id: Date.now().toString(),\n    }\n\n    dispatch(createPost(newPost));\n\n    setTitle('')\n    console.log(newPost);\n  }\n\n  // const changeInputHandler = (event) => {\n  //   setState(event.target.value)\n  // }\n\n  return (\n    <form\n      onSubmit={submitHandler}\n    >\n      <div className=\"form-group\">\n        <label htmlFor=\"title\">Post title</label>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          id=\"title\"\n          value={title}\n          onChange={(event) => {\n              setTitle(event.target.value)\n            }}\n        />\n      </div>\n      <button className=\"btn btn-success\" type=\"submit\">Create</button>\n    </form>\n  );\n};\n","import { CREATE_POST, FETCH_POST, HIDE_LOADER, SHOW_LOADER } from \"./types\";\n\nexport function createPost(post) {\n  return {\n    type: CREATE_POST,\n    payload: post\n  }\n}\n\nexport function fetchPosts() {\n  return async dispatch => {\n    dispatch(showLoader());\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n    const json = await response.json();\n    console.log(json);\n    setTimeout(() => {\n      dispatch({\n        type: FETCH_POST,\n        payload: json,\n      });\n      dispatch(hideLoader());\n    }, 500)\n  }\n}\n\nexport function showLoader() {\n  return {\n    type: SHOW_LOADER\n  }\n}\n\nexport function hideLoader() {\n  return {\n    type: HIDE_LOADER\n  }\n}\n","export const CREATE_POST = 'POST/CREATE_POST';\nexport const FETCH_POST = 'FETCH/FETCH_POST';\nexport const SHOW_LOADER = 'APP/SHOW_LOADER';\nexport const HIDE_LOADER = 'APP/HIDE_LOADER';\n","import React from 'react';\n\nexport default function Post({ post }) {\n  \n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          {post.title}\n        </h5>\n      </div>\n    </div>\n  );\n};","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Post from './Post';\n\nexport default function Posts() {\n\n  const posts = useSelector(state => state.posts);\n  console.log(posts);\n  \n  return (\n    <>\n      {(!posts.length) &&\n        (<p className=\"text-center\">No posts</p>)\n      }\n      <div>\n        {posts.map(post =>\n          <Post\n            key={post.id}\n            post={post}\n          />\n          )}\n      </div>\n    </>\n  );\n};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPosts } from '../redux/actions';\nimport Post from './Post';\n\nexport default function FetchedPosts() {\n  const dispatch = useDispatch();\n  const posts = useSelector((state) => state.fetchedPosts);\n  const loading = useSelector(state => state.app.loading)\n  console.log(posts.length);\n\n  return (\n    <>\n      {loading && (\n        <div class=\"spinner-border text-warning\" role=\"status\">\n          <span class=\"sr-only\">Loading...</span>\n        </div>\n      )}\n      {(!posts.length && !loading) &&\n        (<button\n          className=\"btn btn-primary\"\n          onClick={() => dispatch(fetchPosts())}\n        >\n          Load\n        </button>)\n      }\n      <div>\n        {posts.map(post => {\n          console.log(post);\n          return <Post\n          key={post.id}\n          post={post}\n        />\n        }\n\n          )}\n      </div>\n    </>\n  );\n};","import React from 'react';\nimport PostForm from './components/PostForm';\nimport Posts from './components/Posts';\nimport FetchedPosts from './components/FetchedPosts';\n\nfunction App() {\n  return (\n    <div className=\"container pt-3\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <PostForm />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h2>Posts</h2>\n          <Posts />\n        </div>\n        <div className=\"col\">\n        <h2>FetchedPosts</h2>\n          <FetchedPosts />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { HIDE_LOADER, SHOW_LOADER } from \"./types\";\n\nconst initialState = {\n  loading: false\n}\n\nexport const appReducer = ( state = initialState, action) => {\n  switch(action.type){\n    case SHOW_LOADER:\n      return {\n        ...state,\n        loading: true\n      }\n      case HIDE_LOADER:\n        return  {\n          ...state,\n          loading: false\n        }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { fetchedPostsReducer, postsReducer } from './postsReducer';\nimport { appReducer } from './appReducer';\n\nexport const rootReducer = combineReducers({\n  posts: postsReducer,\n  fetchedPosts: fetchedPostsReducer,\n  app: appReducer,\n})\n\nconsole.log(rootReducer);\n","// const initialState = {\n//   posts: [],\n//   fetchedPosts: []\n// };\n\nimport { CREATE_POST, FETCH_POST } from \"./types\";\n\nexport const postsReducer = (state = [], action) => {\n\n  switch (action.type){\n    case CREATE_POST:\n      return [\n        ...state,\n        action.payload,\n      ]\n    default: return state;\n  }\n};\n\nexport const fetchedPostsReducer = (state = [], action) => {\n\n  switch (action.type){\n    case FETCH_POST:\n      return action.payload;\n    default: return state;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport { rootReducer } from './redux/rootReducer';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}